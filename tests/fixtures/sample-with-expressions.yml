name: Example Dataflow

config:
    expression: with steps ${{ steps.notify.name }} and ${{ steps.read_value.name }}
    expression_test_id: ${{ env.DATAFLOW_ID }}
    expression_math: ${{ env.DATAFLOW_ID + 777 }}
    expression_dataflow_name: ${{ dataflow.name }}
    expression_concat: ${{ steps.notify.alias~steps.read_value.alias }}

steps:
  read_value:
    name: Read a value
    description: Check if the value is returned from the DB
    type: \tool_dataflows\local\step\reader_sql
    config:
      sql: SELECT 1
    outputs:
      # Here "version" will be an output name (available under steps.check.outputs.version)
      # Here "value" is the step's internal reference, which happens to be using the output path of "value".
      version: value
  notify:
    description: Notify all the people involved that this has happened
    depends_on: read_value
    type: tool_dataflows\local\step\writer_stream
    config:
      streamname: /tmp/file
      format: csv
      template: |
        Run #${{ env.DATAFLOW_RUN_NAME }}:
        Hi, your admin userid is TBA
        The query was ${{ steps.read_value.config.sql }}.

# Scopes
# global = globally cross dataflow scoped variables. These being typically defined at the plugin level.
# env = instance scope. It is only available within the run and is disposed of when the run ends. Think of it like a shared space when it doesn't belong in an individual step.
# steps.stepkey.thing = instance scope, but namespaced under a step. Same as env, but specifically linked to a step.
# dataflow
